mod main;

import math::geometry;
import io::print;

// Compile-time function that returns squares of 0..n
comptime fn generate_squares(n: int) [n]int {
    var out: [n]int;
    loop (i = 0; i < n) {
        out[i] = i * i;
    }
    return out;
}

enum Shape {
    Square(size: float64),
    Circle(radius: float64),
}

struct Scene {
    shapes: []Shape,

    fn total_area(self: *Scene) float64 {
        var sum = 0.0;
        loop (i = 0; i < len(self.shapes)) {
            match self.shapes[i] {
                Square(s) => sum += area_square(s),
                Circle(r) => sum += area_circle(r),
            }
        }
        return sum;
    }
}

fn main() int {
    // Create scene
    let scene = Scene{
        shapes: [
            Square(3.0),
            Circle(2.0),
            Square(1.5),
        ],
    };

    print("Total area = ", scene.total_area());

    const sq = generate_squares(5);
    loop (i = 0; i < len(sq)) {
        print("square(", i, ") = ", sq[i]);
    }

    return 0;
}

